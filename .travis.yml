---
sudo: required

env:
  - distribution: centos
    version: 7
    init: /usr/lib/systemd/systemd
    run_opts: "--privileged --volume=/sys/fs/cgroup:/sys/fs/cgroup:ro"
    extra_vars: ""
  - distribution: ubuntu
    version: xenial
    init: /sbin/init
    run_opts: ""
    extra_vars: ""
  - distribution: ubuntu
    version: trusty
    init: /sbin/init
    run_opts: ""
    extra_vars: ""
  - distribution: debian
    version: stretch
    init: /usr/lib/systemd/systemd
    run_opts: ""
    extra_vars: ""
  - distribution: debian
    version: jessie
    init: /sbin/init
    run_opts: ""
    extra_vars: ""
  - distribution: debian
    version: wheezy
    init: /sbin/init
    run_opts: ""
    extra_vars: ""


  - distribution: centos
    version: 7
    init: /usr/lib/systemd/systemd
    run_opts: "--privileged --volume=/sys/fs/cgroup:/sys/fs/cgroup:ro"
    extra_vars: "--extra-vars docker_compose=yes docker_channel=edge"
  - distribution: ubuntu
    version: xenial
    init: /sbin/init
    run_opts: ""
    extra_vars: "--extra-vars docker_compose=yes docker_channel=edge"
  - distribution: ubuntu
    version: trusty
    init: /sbin/init
    run_opts: ""
    extra_vars: "--extra-vars docker_compose=yes docker_channel=edge"
  - distribution: debian
    version: stretch
    init: /sbin/init
    run_opts: ""
    extra_vars: "--extra-vars docker_compose=yes docker_channel=edge"
  - distribution: debian
    version: jessie
    init: /sbin/init
    run_opts: ""
    extra_vars: "--extra-vars docker_compose=yes docker_channel=edge"
  - distribution: debian
    version: wheezy
    init: /sbin/init
    run_opts: ""
    extra_vars: "--extra-vars docker_compose=yes docker_channel=edge"

services:
  - docker

before_install:
  - 'sudo docker pull ${distribution}:${version}'
  - 'sudo docker build --no-cache --rm --file=travis/Dockerfile.${distribution}-${version} --tag=${distribution}-${version}:ansible travis'

script:
  - container_id=$(mktemp)
  - 'sudo docker run --privileged --detach --volume="${PWD}":/etc/ansible/roles/docker_ansible_role:ro ${run_opts} ${distribution}-${version}:ansible "${init}" > "${container_id}"'
  - 'sudo docker exec --tty "$(cat ${container_id})" env TERM=xterm ansible-playbook -v /etc/ansible/roles/docker_ansible_role/travis/test.yml --syntax-check'
  - 'sudo docker exec --tty "$(cat ${container_id})" env TERM=xterm ansible-playbook -v ${extra_vars} /etc/ansible/roles/docker_ansible_role/travis/test.yml'
  - >
    sudo docker exec "$(cat ${container_id})" ansible-playbook -v ${extra_vars} /etc/ansible/roles/docker_ansible_role/travis/test.yml
    | grep -q 'changed=0.*failed=0'
    && (echo 'Idempotence test: pass' && exit 0)
    || (echo 'Idempotence test: fail' && exit 1)
  - 'sudo docker rm -f "$(cat ${container_id})"'

notifications:
  webhooks: https://galaxy.ansible.com/api/v1/notifications/
